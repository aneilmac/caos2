use super::{AgentArg, Anything, ByteString, FloatArg, IntArg, SStringArg, Variable};

#[derive(Eq, PartialEq, Debug, Clone)]
pub enum Integer {
    Literal(i32),
    Attr,
    Base,
    Bhvr,
    Cati {
        family: Box<IntArg>,
        genus: Box<IntArg>,
        species: Box<IntArg>,
    },
    Clac,
    Clik { which_value: Box<IntArg> },
    Fmly,
    Gnus,
    Hght,
    Imsk,
    Mira,
    Mows,
    Paus,
    Plne,
    Pose,
    Puhl {
        pose: Box<IntArg>,
        x_or_y: Box<IntArg>,
    },
    Pupt {
        pose: Box<IntArg>,
        x_or_y: Box<IntArg>,
    },
    Seee {
        first: Box<AgentArg>,
        second: Box<AgentArg>,
    },
    Spcs,
    Tick,
    Totl {
        family: Box<IntArg>,
        genus: Box<IntArg>,
        species: Box<IntArg>,
    },
    Touc {
        first: Box<AgentArg>,
        second: Box<AgentArg>,
    },
    Visi { check_all_cameras: Box<IntArg> },
    Wdth,
    Cmrx,
    Cmry,
    Loft { filename: Box<SStringArg> },
    Meta,
    Snax { filename: Box<SStringArg> },
    Wdow,
    Wndb,
    Wndh,
    Wndl,
    Wndr,
    Wndt,
    Wndw,
    Npgs,
    Page,
    Aslp,
    Attn,
    Body { body_part: Box<IntArg> },
    Bvar,
    Byit,
    Cage,
    Crea { agent: Box<AgentArg> },
    Dead,
    Decn,
    Dirn,
    Drea,
    Drv,
    Expr,
    Face,
    Ins,
    Orgi {
        organ_number: Box<IntArg>,
        data: Box<IntArg>,
    },
    Orgn,
    Tage,
    Uncs,
    Zomb,
    Code,
    Codf,
    Codg,
    Codp,
    Cods,
    Heap { index: Box<IntArg> },
    Paws,
    Unid,
    Inni,
    Inok,
    HistCage {
        moniker: Box<SStringArg>,
        event_no: Box<IntArg>,
    },
    HistCoun { moniker: Box<SStringArg> },
    HistCros { moniker: Box<SStringArg> },
    HistFind {
        moniker: Box<SStringArg>,
        event_type: Box<IntArg>,
        from_index: Box<IntArg>,
    },
    HistFinr {
        moniker: Box<SStringArg>,
        event_type: Box<IntArg>,
        from_index: Box<IntArg>,
    },
    HistGend { moniker: Box<SStringArg> },
    HistGnus { moniker: Box<SStringArg> },
    HistMute { moniker: Box<SStringArg> },
    HistPrev { moniker: Box<SStringArg> },
    HistRtim {
        moniker: Box<SStringArg>,
        event_no: Box<IntArg>,
    },
    HistTage {
        moniker: Box<SStringArg>,
        event_no: Box<IntArg>,
    },
    HistType {
        moniker: Box<SStringArg>,
        event_no: Box<IntArg>,
    },
    HistVari { moniker: Box<SStringArg> },
    HistWnam {
        moniker: Box<SStringArg>,
        event_no: Box<IntArg>,
    },
    HistWtik {
        moniker: Box<SStringArg>,
        event_no: Box<IntArg>,
    },
    HistWuid {
        moniker: Box<SStringArg>,
        event_no: Box<IntArg>,
    },
    Ooww { moniker: Box<SStringArg> },
    Keyd { key_code: Box<IntArg> },
    Mopx,
    Mopy,
    Pure,
    Addm {
        x: Box<IntArg>,
        y: Box<IntArg>,
        width: Box<IntArg>,
        height: Box<IntArg>,
        background: Box<SStringArg>,
    },
    Addr {
        metaroom_id: Box<IntArg>,
        x_left: Box<IntArg>,
        y_right: Box<IntArg>,
        y_left_ceiling: Box<IntArg>,
        y_right_ceiling: Box<IntArg>,
        y_left_floor: Box<IntArg>,
        y_right_floor: Box<IntArg>,
    },
    Door {
        room_id1: Box<IntArg>,
        room_id2: Box<IntArg>,
    },
    Down,
    Gmap { x: Box<FloatArg>, y: Box<FloatArg> },
    Grap { x: Box<FloatArg>, y: Box<FloatArg> },
    Grid {
        agent: Box<AgentArg>,
        direction: Box<IntArg>,
    },
    Hirp {
        room_id: Box<IntArg>,
        ca_index: Box<IntArg>,
        directions: Box<IntArg>,
    },
    Left,
    Link {
        room1: Box<IntArg>,
        room2: Box<IntArg>,
    },
    Lorp {
        room_id: Box<IntArg>,
        ca_index: Box<IntArg>,
        directions: Box<IntArg>,
    },
    Maph,
    Mapk,
    Mapw,
    Perm,
    Rght,
    Room { agent: Box<AgentArg> },
    Rtyp { room_id: Box<IntArg> },
    Up,
    //Motion
    Aero,
    Elas,
    Fall,
    Fric,
    Movs,
    Tmvb {
        delta_x: Box<FloatArg>,
        delta_y: Box<FloatArg>,
    },
    Tmvf { x: Box<FloatArg>, y: Box<FloatArg> },
    Tmvt { x: Box<FloatArg>, y: Box<FloatArg> },
    Wall,
    // Resources
    PrayAgti {
        resource_name: Box<SStringArg>,
        integer_tag: Box<SStringArg>,
        default_value: Box<IntArg>,
    },
    PrayCoun { resource_type: Box<SStringArg> },
    PrayDeps {
        resource_name: Box<SStringArg>,
        dp_install: Box<IntArg>,
    },
    PrayExpo { chunk_name: Box<SStringArg> },
    PrayFile {
        resource_name: Box<SStringArg>,
        resource_type: Box<IntArg>,
        do_install: Box<IntArg>,
    },
    PrayImpo {
        moniker: Box<SStringArg>,
        actually_do_it: Box<IntArg>,
        keep_file: Box<IntArg>,
    },
    PrayInjt {
        resource_name: Box<SStringArg>,
        do_install: Box<IntArg>,
        report_var: Box<Variable>,
    },
    PrayMake {
        which_journal_spot: Box<IntArg>,
        journal_name: Box<SStringArg>,
        which_pray_spot: Box<IntArg>,
        pray_name: Box<SStringArg>,
        report_destination: Box<Variable>,
    },
    PraySize { resource_name: Box<SStringArg> },
    PrayTest { resource_name: Box<SStringArg> },
    // Scripts
    Sorq {
        family: Box<IntArg>,
        genus: Box<IntArg>,
        species: Box<IntArg>,
        event: Box<IntArg>,
    },
    // Sounds
    Mute {
        and_mask: Box<IntArg>,
        eor_mask: Box<IntArg>,
    },
    // Time
    Date,
    Dayt,
    Etik,
    HistDate { world_tick: Box<IntArg> },
    HistSean { world_tick: Box<IntArg> },
    HistTime { world_tick: Box<IntArg> },
    HistYear { world_tick: Box<IntArg> },
    Mont,
    Msec,
    Race,
    Rtim,
    Scol {
        and_mask: Box<IntArg>,
        eor_mask: Box<IntArg>,
        up_speeds: Box<ByteString>,
        down_speeds: Box<ByteString>,
    },
    Sean,
    Time,
    Wolf {
        kanga_mask: Box<IntArg>,
        eeyore_mask: Box<IntArg>,
    },
    Wpau,
    Wtik,
    Year,
    // Variables
    Char {
        string: Box<SStringArg>,
        index: Box<IntArg>,
    },
    Ftoi { number_to_convert: Box<FloatArg> },
    Rand {
        value1: Box<IntArg>,
        value2: Box<IntArg>,
    },
    Rean { catalogue_tag: Box<SStringArg> },
    Reaq { catalogue_tag: Box<SStringArg> },
    Stoi { value: Box<SStringArg> },
    Strl { value: Box<SStringArg> },
    Type { something: Box<Anything> },
    Vmjr,
    Vmnr,
    // Vehicles
    Cabb,
    Cabl,
    Cabp,
    Cabr,
    Cabt,
    Cabv,
    // World
    Nwld,
    Wnti { world: Box<SStringArg> },
    // Ports
    PrtItot,
    PrtFrom { input_port: Box<IntArg> },
    PrtOtot,
}

impl From<i32> for Integer {
    fn from(i: i32) -> Self {
        Integer::Literal(i.into())
    }
}
